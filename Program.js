"use strict";

if (!("a" in window))
{
    var a = 1;
}
alert(a); // Выведется undefiened, так как переменная 'a' объявлена в локальной переменной из-за чего извне о переменной 'a' неизвестно.

var b = function a(x)  
{
    x && a(--x); // Выведется a is not defiened, так как переменной с таким значением не объявлено.
};
alert(a); // В данном случае 'a' является свойство 'name' переменной 'b'.

function a(x) 
{
    return x * 2; // Результатом будет 'Function a', так как 'a' ранее была объявлена как функция. 
} 
var a;
alert(a); // Движок проигнорировал то, что была объявлена переменная 'a', так как в приоретет при объявлении идут функции. 

function b(x, y, a) // Результат будет разным в зависимости от того какой стандарт JS использовать.
{
    arguments[2] = 10; // Если использовать старый, то входные параметры и псевдомассив arguments будут ссылаться на одни и те же значения.
    alert(a);
}
b(1, 2, 3); // В новом же эти значения разделены. В данном файле JS результат будет равен 3.

function a() // Так же результат зависит от стандарта использования с "use-strict" или без него. 
{
    console.log(this); // В первом варианте будет выведен null. Во втором варианте null или undefiend будет заменен на глобальный объект window.
}
a.call(null); 